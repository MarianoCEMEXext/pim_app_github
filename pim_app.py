"""
Se limpia el input.
Se hacen embeddings con los catálogos.
Se hace un match con los embeddings.
Se escribe los resultados en un excel.
"""
import pandas as pd
import time
from openai import AzureOpenAI
import faiss
import numpy as np
import json
import re
from unidecode import unidecode
import os
import pickle
from rapidfuzz import fuzz
from sklearn.metrics.pairwise import cosine_similarity
import streamlit as st
from io import BytesIO

# Nombres de las columnas
# Variables para leer
TIENDA_NUMERO_FABRICANTE = 'NUMERO DE FABRICANTE'
TIENDA_NOMBRE = 'NOMBRE'
TIENDA_UNIDAD_MEDIDA = 'UNIDAD DE MEDIDA'

CATALOGO_CODIGO_SKU = 'CODIGO_SKU'
CATALOGO_NUMERO_FABRICANTE = 'CODIGO_FABRICANTE'
CATALOGO_NOMBRE_SKU = 'NOMBRE_SKU'
CATALOGO_UNIDAD_MEDIDA = 'UNIDAD DE VENTA'

TIENDA_CATALOGO_MARCA = 'MARCA'

# Variables para escribir
CODIGO_FABRICANTE_TIENDA = 'CODIGO FABRICANTE TIENDA'
NOMBRE_TIENDA = 'NOMBRE TIENDA'
MARCA_TIENDA = 'MARCA TIENDA'
UNIDAD_TIENDA = 'UNIDAD TIENDA'

CODIGO_FABRICANTE_CATALOGO = 'CODIGO FABRICANTE CATALOGO'
SKU_CATALOGO = 'SKU CATALOGO'
NOMBRE_CATALOGO = 'NOMBRE CATALOGO'
MARCA_CATALOGO = 'MARCA CATALOGO'
UNIDAD_CATALOGO = 'UNIDAD CATALOGO'

PORCENTAJE_TOTAL = 'PORCENTAJE'
PORCENTAJE_CODIGO_FABRICANTE = '% CODIGO FABRICANTE'
PORCENTAJE_NOMBRE = '% NOMBRE'
PORCENTAJE_MARCA = '% MARCA'
PORCENTAJE_UNIDAD = '% UNIDAD'

RAZON = 'RAZÓN'


# Función para cargar y limpiar artículos
def cargar_y_limpiar_articulos(articulos_con_pim, articulos_sin_pim):
    """
    Carga y limpia los artículos con y sin PIM.
    Input:
        articulos_con_pim: DataFrame con los artículos con PIM.
        articulos_sin_pim: DataFrame con los artículos sin PIM.
    Output:
        articulos_con_pim: DataFrame con los artículos con PIM limpios.
        articulos_sin_pim: DataFrame con los artículos sin PIM limpios.
    """

    # Normalización de "GENÉRICO" en MARCA y FABRICANTE
    valores_genericos = [
        "GENERICO", "GENERICA", "GENERICOS", "GENRICO", "GNRICO", "GERICO", "GENERCO",  
        "GENERICAS", "GENRICOS", "GENERICO.", "GENERIC", "GENEICO", "GENRECO", "GENRRICO",  
        "GENERIK", "GENERIKO", "GENNERICO", "GENRRRICO", "GENRC", "GNRC", "NO ESPECIFICA",
        ""," ","N/A", "NA", "S/MARCA", "S/M","SIN MARCA", "NO MARCA", "NINGUNA", "NO APLICA", "NO ESPECIFICADO"
    ]

    articulos_con_pim[TIENDA_CATALOGO_MARCA] = articulos_con_pim[TIENDA_CATALOGO_MARCA].replace(valores_genericos, "GENERICO")
    # articulos_con_pim['FABRICANTE'] = articulos_con_pim['FABRICANTE'].replace(valores_genericos, "GENERICO")
    articulos_sin_pim[TIENDA_CATALOGO_MARCA] = articulos_sin_pim[TIENDA_CATALOGO_MARCA].replace(valores_genericos, "GENERICO")
    # articulos_sin_pim['FABRICANTE'] = articulos_sin_pim['FABRICANTE'].replace(valores_genericos, "GENERICO")

    # Diccionario de reemplazo para normalizar las unidades de medida
    unidades_reemplazo={
        "EA": "PIEZA", "PZA": "PIEZA", "PZ": "PIEZA", "EZ": "PIEZA", "PZAS": "PIEZA", "PIEZAS": "PIEZA", "UNIDAD": "PIEZA",
        "UND": "PIEZA", "U": "PIEZA", "PIEZA(S)": "PIEZA", "PZS": "PIEZA",

        "GLL": "GALON 4LT", "GAL": "GALON 4LT", "GALO": "GALON 4LT", "GALLON": "GALON 4LT", "GALON": "GALON 4LT",
        "GL": "GALON 4LT", "GALONES": "GALON 4LT", "GALOON": "GALON 4LT",

        "KG": "KILOGRAMOS", "KILO": "KILOGRAMOS", "KILOGRAMO": "KILOGRAMOS", "KILOGRAMOS": "KILOGRAMOS", "KGS": "KILOGRAMOS",
        "KGR": "KILOGRAMOS", "K": "KILOGRAMOS", "KG.": "KILOGRAMOS", "KGRAMOS": "KILOGRAMOS", "KILOS": "KILOGRAMOS",

        "L": "LITRO 1LT", "LT": "LITRO 1LT", "LITRO": "LITRO 1LT", "LITROS": "LITRO 1LT", "LTR": "LITRO 1LT", "LTS": "LITRO 1LT",
        "LIT": "LITRO 1LT", "LTRS": "LITRO 1LT", "LTRO": "LITRO 1LT", "LTROS": "LITRO 1LT",

        "BAG": "BOLSA", "BG": "BOLSA", "SACO": "BOLSA", "BOLSAS": "BOLSA", "SACOS": "BOLSA", "BLS": "BOLSA", "BOL": "BOLSA",
        "BOLSA(S)": "BOLSA",

        "CS": "CAJA", "BOX": "CAJA", "CJ": "CAJA", "CAJAS": "CAJA", "BX": "CAJA", "CX": "CAJA", "CJAS": "CAJA", "CJA": "CAJA",

        "JGO": "JUEGO", "JUEGOS": "JUEGO", "JG": "JUEGO", "SET": "JUEGO", "SETS": "JUEGO",

        "BCK": "CUBETA 19L", "CUBETA": "CUBETA 19L", "CUBETAS": "CUBETA 19L", "BKT": "CUBETA 19L", "CBT": "CUBETA 19L",
        "BALDE": "CUBETA 19L", "BALDES": "CUBETA 19L",

        "M": "METRO LINEAL", "MTS": "METRO LINEAL", "MT": "METRO LINEAL", "METRO": "METRO LINEAL", "METROS": "METRO LINEAL",
        "METRO(S)": "METRO LINEAL", "MTR": "METRO LINEAL",

        "M2": "METRO CUADRADO", "MT2": "METRO CUADRADO", "METRO2": "METRO CUADRADO", "METROS CUADRADOS": "METRO CUADRADO",
        "MTS2": "METRO CUADRADO", "MTR2": "METRO CUADRADO",

        "M3": "METRO CUBICO", "MT3": "METRO CUBICO", "METRO3": "METRO CUBICO", "METROS CUBICOS": "METRO CUBICO",
        "MTS3": "METRO CUBICO", "MTR3": "METRO CUBICO", "CUBO": "METRO CUBICO",

        "TON": "TONELADA", "TO": "TONELADA", "TONELADA NETA": "TONELADA", "TONELADAS": "TONELADA", "TN": "TONELADA",
        "TNL": "TONELADA", "T": "TONELADA", "TON.": "TONELADA",

        "ROL": "ROLLO", "RLL": "ROLLO", "ROLLOS": "ROLLO", "RLLS": "ROLLO",

        "CM": "CENTIMETROS", "CENTIMETROS": "CENTIMETROS", "CMS": "CENTIMETROS", "CMTS": "CENTIMETROS",
        "CENTIMETRO": "CENTIMETROS", "CM.": "CENTIMETROS",

        "VJE": "VIAJE", "VIAJES": "VIAJE", "TRIP": "VIAJE", "VJES": "VIAJE",

        "MILL": "MILLAR", "MILLARES": "MILLAR", "MLL": "MILLAR", "MIL": "MILLAR",

        "ML":"PIEZA", "MILILITRO":"PIEZA","MILILITROS":"PIEZA","MLS":"PIEZA",

        "G":"PIEZA","GRAMOS":"PIEZA","GR":"PIEZA","GMS":"PIEZA","GRAMO":"PIEZA","GR.":"PIEZA", "GRMS.":"PIEZA",

        "PACK": "PAQUETE", "PCK": "PAQUETE", "PAQUETE": "PAQUETE", "PAQUETES": "PAQUETE", "PKG": "PAQUETE", "PK": "PAQUETE",

        "TAMBO": "TAMBO", "TAMBOR": "TAMBO", "TMB": "TAMBO", "DRUM": "TAMBO", "BA": "TAMBO",

        "CIENTO": "CIENTO", "CTO": "CIENTO", "CTOS": "CIENTO", "100": "CIENTO", "CNTO": "CIENTO",

        "KIT": "KIT", "KITS": "KIT", "SET DE PIEZAS": "KIT","SET": "KIT",

        "PAR": "PAR", "PARES": "PAR", "PR": "PAR", "PRS": "PAR",

        "CARTUCHO": "CARTUCHO", "CRT": "CARTUCHO", "CARTUCHOS": "CARTUCHO", "CRTCHO": "CARTUCHO", "CARTRIDGE": "CARTUCHO"
    }

    articulos_sin_pim[TIENDA_UNIDAD_MEDIDA] = articulos_sin_pim[TIENDA_UNIDAD_MEDIDA].replace(unidades_reemplazo)
    articulos_con_pim[CATALOGO_UNIDAD_MEDIDA] = articulos_con_pim[CATALOGO_UNIDAD_MEDIDA].replace(unidades_reemplazo)

    # Diccionario de reemplazo para normalizar marcas y fabricantes
    marcasyfabricantes_reemplazo={

        "TRUPER":"TRUPER","TRPER":"TRUPER","TUPER":"TRUPER","TRRUPER":"TRUPER","TRUPE":"TRUPER","TRUPR":"TRUPER",
        "TRUPEER":"TRUPER","TURPER":"TRUPER","TRUPERR":"TRUPER","TURPERR":"TRUPER","TURPE":"TRUPER",
        "TRUPPERR":"TRUPER","TRUP":"TRUPER","TRUPRER":"TRUPER","TRUPUER":"TRUPER","TRUPER ":"TRUPER",
        "TRU PER":"TRUPER","TRRU PER":"TRUPER","TRUUPER":"TRUPER","TRRUPR":"TRUPER","TRUP3R":"TRUPER",

        "PETUL":"PRETUL","PRETUL":"PRETUL","PRTUL":"PRETUL","PETRUL":"PRETUL","PRETL":"PRETUL",
        "PRETUL ":"PRETUL","PRRETUL":"PRETUL","PETUUL":"PRETUL","PREDUL":"PRETUL","PRETU":"PRETUL",
        "PETUL ":"PRETUL","PRETTL":"PRETUL","PRE TUL":"PRETUL","PRRETUL":"PRETUL","PRETULL":"PRETUL",

        "SURTEK":"SURTEK","SURTEC":"SURTEK","SUTEK":"SURTEK","SURTK":"SURTEK","SIRTEK":"SURTEK",
        "SURTE":"SURTEK","SURTECK":"SURTEK","ZURTEK":"SURTEK","SURTEK ":"SURTEK","SURKTEK":"SURTEK",
        "SURTEK ":"SURTEK","SURETK":"SURTEK","SURTREK":"SURTEK","SUTEKK":"SURTEK","SURTEQ":"SURTEK",

        "URREA":"URREA","UREA":"URREA","URREA ":"URREA","URRA":"URREA","URREA":"URREA","URRAE":"URREA",
        "URRREA":"URREA","UERRA":"URREA","URREAA":"URREA","URR A":"URREA","UR REA":"URREA","URR3A":"URREA",

        "STANLEY":"STANLEY","STANLY":"STANLEY","STANLEE":"STANLEY","STENLEY":"STANLEY","STANL3Y":"STANLEY",
        "STAN LEE":"STANLEY","STANLEY ":"STANLEY","STANLE":"STANLEY","STANELEY":"STANLEY","STANLYE":"STANLEY",
        "STAN LAY":"STANLEY","STANLI":"STANLEY","STANEY":"STANLEY","STANLEYE":"STANLEY","STANLY ":"STANLEY",

        "DEWALT":"DEWALT","DE WALT":"DEWALT","DWALT":"DEWALT","DWEALT":"DEWALT","DEWALT ":"DEWALT",
        "DE WA LT":"DEWALT","DEWWALT":"DEWALT","DEWWALT ":"DEWALT","DE WAALT":"DEWALT","DEWWLT":"DEWALT",
        "DEWLT":"DEWALT","DEWLAT":"DEWALT","DEWA LT":"DEWALT","DEWALT.":"DEWALT","D3WALT":"DEWALT",

        "BLACK & DECKER":"BLACK & DECKER","BLACKDECKER":"BLACK & DECKER","BLACK DACKER":"BLACK & DECKER",
        "BLACK AND DECKER":"BLACK & DECKER","BLACK & DEK":"BLACK & DECKER","BLACK&DECKER":"BLACK & DECKER",
        "BLCK & DECKER":"BLACK & DECKER","BLACK AND DEKER":"BLACK & DECKER","BLAC & DECKER":"BLACK & DECKER",
        "BLAK & DECKER":"BLACK & DECKER","BLK & DECKER":"BLACK & DECKER","BLACK & DE CKER":"BLACK & DECKER",
        "BLACK& DECKER":"BLACK & DECKER","BLACK DECKER":"BLACK & DECKER","BLAK & DCKER":"BLACK & DECKER",

        "BOSCH":"BOSCH","BOSH":"BOSCH","BOSC":"BOSCH","BOS":"BOSCH","BOOSCH":"BOSCH","BOZH":"BOSCH",
        "BOSHC":"BOSCH","BOS C":"BOSCH","BOSCH ":"BOSCH","BOSK":"BOSCH","BO CH":"BOSCH","BOSH ":"BOSCH",
        "BOOSCH":"BOSCH","BOS CH":"BOSCH","B0SCH":"BOSCH","BOSCHH":"BOSCH","BOSH.":"BOSCH","BOSZH":"BOSCH",

        "MAKITA":"MAKITA","MAQITA":"MAKITA","MAKI":"MAKITA","MAKIT":"MAKITA","MA KITA":"MAKITA",
        "MAKITTA":"MAKITA","MAKITA ":"MAKITA","MAQKITA":"MAKITA","MA KI TA":"MAKITA","MAKITAAA":"MAKITA",
        "MAKIT.":"MAKITA","MAKKITA":"MAKITA","MAKITTA ":"MAKITA","MAKTA":"MAKITA","MAKIITA":"MAKITA",

        "MILWAUKEE":"MILWAUKEE","MILWAKE":"MILWAUKEE","MILWUAKE":"MILWAUKEE","MILWAUK":"MILWAUKEE",
        "MILWAKI":"MILWAUKEE","MILWAUKI":"MILWAUKEE","MILWAUK EE":"MILWAUKEE","MILWKEE":"MILWAUKEE",
        "MIL WAUKEE":"MILWAUKEE","MILWAUKE":"MILWAUKEE","MILWAU KEE":"MILWAUKEE","MILLWAUKEE":"MILWAUKEE",
        "MILWUEKE":"MILWAUKEE","MILWAKKE":"MILWAUKEE","MILLWAUKIE":"MILWAUKEE","MILLWAUKE":"MILWAUKEE",
        "MILWUEK":"MILWAUKEE","MILWAU KEE ":"MILWAUKEE","MIL WUKEE":"MILWAUKEE","MILWAUCKE":"MILWAUKEE",
            
        "DREMEL":"DREMEL","DREMMEL":"DREMEL","DREML":"DREMEL","DREME":"DREMEL","DREM":"DREMEL",
        "DREMEL ":"DREMEL","DREMM":"DREMEL","DREMMELS":"DREMEL","DREMELT":"DREMEL","DREMELS":"DREMEL",
        "DREMEL1":"DREMEL","DREMEL-":"DREMEL","DREMLE":"DREMEL","DREML":"DREMEL","DREMMEL.":"DREMEL",
            
        "STIHL":"STIHL","STILL":"STIHL","STIHL ":"STIHL","STIHLL":"STIHL","STHIL":"STIHL",
        "STIL":"STIHL","SHTIL":"STIHL","STHL":"STIHL","S TIHL":"STIHL","STIHL-":"STIHL",
        "STIIL":"STIHL","STILH":"STIHL","STIHL.":"STIHL","STHIL":"STIHL","STIHLX":"STIHL",
        "SHTIHL":"STIHL","SITHL":"STIHL","SITHL":"STIHL",

        "HILTI":"HILTI","HILTY":"HILTI","HILT":"HILTI","HILTI ":"HILTI","HILIT":"HILTI",
        "HILTYY":"HILTI","HILTII":"HILTI","HITLI":"HILTI","HILITEE":"HILTI","HILTI-":"HILTI",
        "HILTYY":"HILTI","HILT": "HILTI","HILTI-":"HILTI","HILTTI":"HILTI","HILTIE":"HILTI",
        "HITLI":"HILTI","HILIT":"HILTI","HILTYY":"HILTI",

        "MIKELS":"MIKELS","MIKES":"MIKELS","MIKEL":"MIKELS","MIKELS ":"MIKELS","MIKEELS":"MIKELS",
        "MIKES ":"MIKELS","MIKLE":"MIKELS","MIKELS.":"MIKELS","MIEKLS":"MIKELS","MIKES-":"MIKELS",
        "MICKELS":"MIKELS","MIKESZ":"MIKELS","MIKLS":"MIKELS","MIKELS1":"MIKELS","MIKE":"MIKELS",
        "MIKELLS":"MIKELS","MIEKLS":"MIKELS","MIKELS-":"MIKELS","MIKELS2":"MIKELS","MICKLE":"MIKELS",

        "HUSKY":"HUSKY","HUSKEY":"HUSKY","HUSKY ":"HUSKY","HUSKYY":"HUSKY","HUSK":"HUSKY",
        "HUSKE":"HUSKY","HUSY":"HUSKY","HUSKY-":"HUSKY","HUSKEYY":"HUSKY","HUSKIE":"HUSKY",
        "HUSKYX":"HUSKY","HUSKY1":"HUSKY","HUSKEE":"HUSKY","HUSKY-":"HUSKY","HUSKYY ":"HUSKY",
        "HUSKY11":"HUSKY","HUSKY-1":"HUSKY","HUSK  ":"HUSKY",

        "AUSTROMEX":"AUSTROMEX","AUZTROMEX":"AUSTROMEX","AUZTROMEX ":"AUSTROMEX","AUSTROMEXX":"AUSTROMEX",
        "AUSTROEMEX":"AUSTROMEX","AUSTROMEX-":"AUSTROMEX","AUSTROMEXXX":"AUSTROMEX","AUSTREOMEX":"AUSTROMEX",
        "AUSROMEX":"AUSTROMEX","AUSTROMEXX":"AUSTROMEX","AUSTROMEX-":"AUSTROMEX","AUSTROEMEX":"AUSTROMEX",
        "AUSTROMEXE":"AUSTROMEX","AUSTROMEX1":"AUSTROMEX",

        "STEREN":"STEREN","STERREN":"STEREN","STREN":"STEREN","STERE":"STEREN","STEREN ":"STEREN",
        "SHTEREN":"STEREN","STRENE":"STEREN","STRENEX":"STEREN","STRENX":"STEREN","SHTERENN":"STEREN",
        "STRENN":"STEREN","STERN":"STEREN","STEREN.":"STEREN","STERRE":"STEREN","STREEM":"STEREN",
        "STREN2":"STEREN","STRE":"STEREN",

        "GENERAC":"GENERAC","GENERIC":"GENERAC","GENREAC":"GENERAC","GENRAC":"GENERAC","GENERAC ":"GENERAC",
        "GENRE":"GENERAC","GENERIC ":"GENERAC","GENEC":"GENERAC","GENREAC ":"GENERAC","GENERAC-":"GENERAC",
        "GENERACC":"GENERAC","GENEARC":"GENERAC","GENERAA":"GENERAC","GENAERIC":"GENERAC","GENREAT":"GENERAC",
        "GENREAC ":"GENERAC","GENREX":"GENERAC",

        "KARCHER":"KARCHER","KERCHER":"KARCHER","KARCHER ":"KARCHER","KARSHER":"KARCHER","KARCHER-":"KARCHER",
        "KARCHER.":"KARCHER","KERCHER ":"KARCHER","KARCHERX":"KARCHER","KARCHER1":"KARCHER","KARCHER2":"KARCHER",
        "KERCH":"KARCHER","KARSHER ":"KARCHER","KARCHERL":"KARCHER","KARCHER#":"KARCHER","KARCHER-1":"KARCHER",
        "KERCH1":"KARCHER","KARCHER -":"KARCHER",

        "LINCOLN ELECTRIC":"LINCOLN ELECTRIC","LINCOLN":"LINCOLN ELECTRIC","LINCOLNELECTRIC":"LINCOLN ELECTRIC",
        "LINCOLNELEC":"LINCOLN ELECTRIC","LINCOLN-ELECTRIC":"LINCOLN ELECTRIC","LINCOLN ELECTRIC ":"LINCOLN ELECTRIC",
        "LINCOLN-":"LINCOLN ELECTRIC","LINCOLN ELECTRIC":"LINCOLN ELECTRIC","LINCOLN ELECTRICS":"LINCOLN ELECTRIC",
        "LINCOLN ELECTRICX":"LINCOLN ELECTRIC","LINCOLNELECTRIC-":"LINCOLN ELECTRIC","LINCOLN-ELECTRIC":"LINCOLN ELECTRIC",
        "LINCOLN-ELEC":"LINCOLN ELECTRIC","LINCOLEC":"LINCOLN ELECTRIC","LINCOLNELEC":"LINCOLN ELECTRIC",

        "VLTCK": "VOLTECK", "VOLTEC": "VOLTECK", "VOLTEK": "VOLTECK","VLTEK": "VOLTECK", "VOLTK": "VOLTECK",
        "VOLTEK ":"VOLTECK","V0LTEK":"VOLTECK","VLTTEK":"VOLTECK","VLTCK ":"VOLTECK","VOLTEK1":"VOLTECK",
        "V0LTEC":"VOLTECK","V0LTK":"VOLTECK","VLT3EK":"VOLTECK","VOTECK":"VOLTECK","VLT EK":"VOLTECK",
        "VOLTEC ":"VOLTECK","VOTEK":"VOLTECK","VLTCEK":"VOLTECK","VLTKE":"VOLTECK",

        "SQUARE D":"SQUARE D","SQUARED":"SQUARE D","SQUARRED":"SQUARE D","SQUARED ":"SQUARE D",
        "SQUARED":"SQUARE D","SQUARE D ":"SQUARE D","SQURED":"SQUARE D","SQRE D":"SQUARE D",
        "SQUARED ":"SQUARE D","SQD":"SQUARE D","SQUARED.":"SQUARE D","SQUAR":"SQUARE D","SQUARRED":"SQUARE D",
        "SQRE":"SQUARE D","SQURD":"SQUARE D","SQUARED-":"SQUARE D",

        "EATON":"EATON","EATTON":"EATON","EATON ":"EATON","EATONX":"EATON","EATTON ":"EATON","EATTONN":"EATON",
        "EATEN":"EATON","EATTON-":"EATON","ETTON":"EATON","EATONN":"EATON","EAT0N":"EATON","EATTONX":"EATON",
        "EATTON":"EATON","EAT-ON":"EATON","EATTIN":"EATON","EATON-":"EATON",


        "SCHNEIDER ELECTRIC":"SCHNEIDER ELECTRIC","SCHNEIDER":"SCHNEIDER ELECTRIC","SCHNEIDER ":"SCHNEIDER ELECTRIC",
        "SCHNEIDER-":"SCHNEIDER ELECTRIC","SCHNEIDERELECTRIC":"SCHNEIDER ELECTRIC","SCHNEIDERX":"SCHNEIDER ELECTRIC",
        "SCHNEIDER.":"SCHNEIDER ELECTRIC","SCHNEIDER-E":"SCHNEIDER ELECTRIC","SCHNIDER":"SCHNEIDER ELECTRIC",
        "SCHNEIDERE":"SCHNEIDER ELECTRIC","SCHNEDER":"SCHNEIDER ELECTRIC","SCHEDER":"SCHNEIDER ELECTRIC",
        "SCHNEIDER-X":"SCHNEIDER ELECTRIC","SCHNEIDER-X":"SCHNEIDER ELECTRIC","SCHNEIDE":"SCHNEIDER ELECTRIC",

        "LEVITON":"LEVITON","LEBTON":"LEVITON","LEVITON-":"LEVITON","LEVITON ":"LEVITON","LEVITONX":"LEVITON",
        "LEVITTON":"LEVITON","LEVITONX":"LEVITON","LEVITON1":"LEVITON","LEVTON":"LEVITON","LEVTON":"LEVITON",
        "LEVIOTN":"LEVITON","LEV-ITON":"LEVITON","LEVITONE":"LEVITON","LEVITON1":"LEVITON","LEVITON.":"LEVITON",

        "BTICINO":"BTICINO","BTICINNO":"BTICINO","BTICINO-":"BTICINO","BTICIN":"BTICINO","BTCCINO":"BTICINO",
        "BTICINO1":"BTICINO","BTICIN":"BTICINO","BTICINO.":"BTICINO","BTINCINO":"BTICINO","BTICIN0":"BTICINO",
        "BTICINOX":"BTICINO","BTINICIO":"BTICINO","BTICI":"BTICINO","BTITCINO":"BTICINO","BTICIO":"BTICINO",

        "PHILIPS":"PHILIPS","FILIPS":"PHILIPS","PHLIPS":"PHILIPS","PHILIP":"PHILIPS","PHILIIP":"PHILIPS",
        "PHILIPS1":"PHILIPS","PHIPLS":"PHILIPS","PHILPS":"PHILIPS","PHILIPP":"PHILIPS","PHIL-IPS":"PHILIPS",
        "PHILP":"PHILIPS","PHLIP":"PHILIPS","PHIPLS":"PHILIPS","PHLIIPS":"PHILIPS","PHILIPS-":"PHILIPS",
        "PHILPS-":"PHILIPS","PHILIPX":"PHILIPS",

        "OSRAM":"OSRAM","OZRAM":"OSRAM","OSRAM-":"OSRAM","OZRAM ":"OSRAM","OSRAM1":"OSRAM",
        "OSRAM-":"OSRAM","OZRAMX":"OSRAM","OZRAM.":"OSRAM","OSRAMX":"OSRAM","OSRAM X":"OSRAM",
        "OZRAM ":"OSRAM","OZRAM-":"OSRAM","OSRAMX-":"OSRAM","OZRAM1":"OSRAM","OZRM":"OSRAM",

        "GE LIGHTING":"GE LIGHTING","GELIGTHING":"GE LIGHTING","GELIGHTING":"GE LIGHTING","GELIGHTING-":"GE LIGHTING",
        "GELIGHTINGX":"GE LIGHTING","GELIGHTIN":"GE LIGHTING","GE LIGHITNG":"GE LIGHTING","GE-LIGHTING":"GE LIGHTING",
        "GELIGT":"GE LIGHTING","GELIGTH":"GE LIGHTING","GELIGH":"GE LIGHTING","GE-LIGHT":"GE LIGHTING",
        "GELIGHT":"GE LIGHTING","GELIGHTING.":"GE LIGHTING","GELGHTING":"GE LIGHTING","GELTIGHTING":"GE LIGHTING",
        "GE LIGHT":"GE LIGHTING","GELIGHTINGX":"GE LIGHTING",

        "CEMEX":"CEMEX","CMX":"CEMEX","CEMEX-":"CEMEX","CEMEX.":"CEMEX","CEMEXX":"CEMEX",
        "CEMEX1":"CEMEX","CEMEXX-":"CEMEX","CEMEXX1":"CEMEX","CEMEXX1":"CEMEX","CEMEX-1":"CEMEX",
        "CEMEXX.":"CEMEX","CEMEXS":"CEMEX","CMEX":"CEMEX","CEMEX-1":"CEMEX","CEMEXX-":"CEMEX",

        "HOLCIM":"HOLCIM","JOLCIM":"HOLCIM","HOLCIMX":"HOLCIM","HOLCIM.":"HOLCIM","HOLCIM-":"HOLCIM",
        "HOLCIM1":"HOLCIM","HOLCIMX":"HOLCIM","HOLCIMEX":"HOLCIM","HOLCIMEX-":"HOLCIM","HOLCIMX1":"HOLCIM",
        "JOLCIM":"HOLCIM","HOLC-IM":"HOLCIM","JOLIM":"HOLCIM","HOLCIM-":"HOLCIM","HOLCIMX-":"HOLCIM",
        "HOLCIMS":"HOLCIM","HOLCIMX1":"HOLCIM","HOLCIM-1":"HOLCIM","HOLCIMX-":"HOLCIM",

        "MOCTEZUMA":"MOCTEZUMA","MOCTESUMA":"MOCTEZUMA","MOCTEZUM":"MOCTEZUMA","MOCTEZUMA ":"MOCTEZUMA",
        "MOCTEZUM-":"MOCTEZUMA","MOCTEZUMEX":"MOCTEZUMA","MOCTEZUMAX":"MOCTEZUMA","MOC-TEZUMA":"MOCTEZUMA",
        "MOTCEZUMA":"MOCTEZUMA","MOCTEZUM-":"MOCTEZUMA","MOCTEZUMAX":"MOCTEZUMA","MCTEZUMA":"MOCTEZUMA",
        "MOCTEZUMAX":"MOCTEZUMA","MOCTEZUM":"MOCTEZUMA","MOCTEZUMA-":"MOCTEZUMA","MCTEZUM":"MOCTEZUMA",

        "CEMIX":"CEMIX","SEMIX":"CEMIX","CEMIX.":"CEMIX","CEMIX-":"CEMIX","CEMIX1":"CEMIX",
        "CEMIXX":"CEMIX","CEMIX-X":"CEMIX","CEMIX-":"CEMIX","CEMIXX-":"CEMIX","CEMIXS":"CEMIX",
        "CEMIX1":"CEMIX","CEMIXXX":"CEMIX","CEMX":"CEMIX","CEMIX-1":"CEMIX","CEMIX-":"CEMIX",
        "CEMIX-":"CEMIX","CEMIXX":"CEMIX","CEMIX.":"CEMIX",

        "ROTOPLAS":"ROTOPLAS","ROTOTLAS":"ROTOPLAS","ROTOPALS":"ROTOPLAS","ROTOBLAS":"ROTOPLAS","ROTOPLAX":"ROTOPLAS",
        "ROTOPLASS":"ROTOPLAS","ROTOPLAX":"ROTOPLAS","ROTOPLASS-":"ROTOPLAS","ROTOPLAS1":"ROTOPLAS","ROTOPLAZ":"ROTOPLAS",
        "ROTOPLAS1":"ROTOPLAS","ROTOPLAZ":"ROTOPLAS","ROTOPLAXX":"ROTOPLAS","ROTO-PLAS":"ROTOPLAS",
        "ROTOPLASS":"ROTOPLAS","ROTOPLAX-":"ROTOPLAS","ROTOPLASX":"ROTOPLAS","ROTOPLAXX":"ROTOPLAS",
        "ROTOPLAS-":"ROTOPLAS","ROTOPLASS":"ROTOPLAS",

        "TUBO PLUS":"TUBO PLUS","TUBOPLUS":"TUBO PLUS","TUBO-PLUS":"TUBO PLUS","TUBOPLUS-":"TUBO PLUS","TUBO+":"TUBO PLUS",
        "TUBO PLUS":"TUBO PLUS","TUBO-PLUS":"TUBO PLUS","TUBO PLU-":"TUBO PLUS","TUBO PLUS-":"TUBO PLUS",
        "TUBOPLUS":"TUBO PLUS","TUBOPLUS1":"TUBO PLUS","TUBO-PLUS":"TUBO PLUS","TUBO+":"TUBO PLUS",
        "TUBO PLUS1":"TUBO PLUS","TUBOPLS":"TUBO PLUS","TUBOPLUS":"TUBO PLUS",

        "NACOBRE":"NACOBRE","NACOBREX":"NACOBRE","NACOBRE-":"NACOBRE","NACOBRE-1":"NACOBRE","NACOBRE1":"NACOBRE",
        "NACOBRE.":"NACOBRE","NACOBREX-":"NACOBRE","NACOBRE-":"NACOBRE","NACOBREX1":"NACOBRE","NACOBREX-":"NACOBRE",


        "FESTER":"FESTER","FESTR":"FESTER","FESTE":"FESTER","FESER":"FESTER","FSTRE":"FESTER",
        "FESTER-":"FESTER","FESTER1":"FESTER","FESTERX":"FESTER","FESTR-":"FESTER","FESTERX-":"FESTER",
        
        "SIKA":"SIKA","SIKKA":"SIKA","SIKA-":"SIKA","SIKA1":"SIKA","SIKX":"SIKA","SIKAEX":"SIKA",
        "SIK-":"SIKA","SIKA1":"SIKA","SIKKA-":"SIKA","SIKA-1":"SIKA","SIKAEX":"SIKA",

        "TEK BOND":"TEK BOND","TECHBOND":"TEK BOND","TEK BOND-":"TEK BOND","TECH BOND":"TEK BOND",
        "TEK-BOND":"TEK BOND","TEK-BON":"TEK BOND","TECBOND":"TEK BOND","TEK-BOND":"TEK BOND","TEK BND":"TEK BOND",

        "FNDELI":"FANDELI","FANDELY":"FANDELI","FANDELI-":"FANDELI","FNDELI1":"FANDELI","FANDELLI":"FANDELI",
        "FNDELY":"FANDELI","FANDYLI":"FANDELI","FANDEL":"FANDELI","FANDELI-X":"FANDELI","FANDELI-X":"FANDELI",
        
        "ADIR":"ADIR","ADYR":"ADIR","ADIR-":"ADIR","ADIRX":"ADIR","ADIR1":"ADIR","ADIR1X":"ADIR",
        "ADIR-X":"ADIR","ADIRX-":"ADIR","ADIR1X":"ADIR",

        "NOVA CERAMIC":"NOVA CERAMIC","NOVACERAMIK":"NOVA CERAMIC","NOVACERAMIC":"NOVA CERAMIC",
        "NOVA-CERAMIC":"NOVA CERAMIC","NOVA CERAM":"NOVA CERAMIC","NOVA-CERAMIC":"NOVA CERAMIC",
        "NOVA CER":"NOVA CERAMIC","NOVACER":"NOVA CERAMIC","NOVACERAM-":"NOVA CERAMIC",
        
        "BOSNOR":"BOSNOR","BOSNOOR":"BOSNOR","BOSNOR-":"BOSNOR","BOSNOR1":"BOSNOR","BOSN-OR":"BOSNOR",
        "BOSNO":"BOSNOR","BOSNRO":"BOSNOR","BOSNOR-1":"BOSNOR","BOSNORX":"BOSNOR",

        "TEKNISOL":"TEKNISOL","TECNISOL":"TEKNISOL","TECNOSOL":"TEKNISOL","TEKINSOL":"TEKNISOL",
        "TEKNISOL-":"TEKNISOL","TEKISOL":"TEKNISOL","TEKNISOL-":"TEKNISOL","TECHNISOL":"TEKNISOL",

        "REHAU":"REHAU","REJAU":"REHAU","REHAU-":"REHAU","REH-HAU":"REHAU","REHA1":"REHAU",
        "REHAUX":"REHAU","REHAU-X":"REHAU","REHAU1":"REHAU","REHUA":"REHAU","REH-AU":"REHAU",

        "DEXTR":"DEXTER","DEKSTER":"DEXTER","DECSTER":"DEXTER","DEXXTER":"DEXTER","DEXTER1":"DEXTER",
        "DEXTER-":"DEXTER","DEXTERX":"DEXTER","DEKSTER-":"DEXTER","DEXXTERX":"DEXTER","DEXTER1X":"DEXTER",
        
        "JAFHER":"JAFHER","JAFER":"JAFHER","JAFHER-":"JAFHER","JAF-HER":"JAFHER","JAFHERX":"JAFHER",
        "JAFHER1":"JAFHER","JAF-HERX":"JAFHER","JAFHER1X":"JAFHER",

        "TYTANE":"TYTANE","TITANE":"TYTANE","TITANE-":"TYTANE","TYTANE1":"TYTANE","TITANE1":"TYTANE",
        "TYTANE-X":"TYTANE","TITANE-X":"TYTANE","TITANE-X":"TYTANE","TYTANE1X":"TYTANE","TITAN-X":"TYTANE",
        
        "CISTERNA":"CISTERNA","SISTERNA":"CISTERNA","CISTERNA-":"CISTERNA","CISTER-X":"CISTERNA","CISTERNA1":"CISTERNA",
        "CISTERN":"CISTERNA","CISTER-X":"CISTERNA","SISTER-N":"CISTERNA","SISTER-X":"CISTERNA",
        
        "BERL":"BEREL","BERELL":"BEREL","BEREEL":"BEREL","BEREL-":"BEREL","BEREL1":"BEREL",
        "BERELIN":"BEREL","BERELX":"BEREL","BEREL1":"BEREL","BEREL-IN":"BERELINTE","BERELX-":"BERELINTE",
        
        "BEREL-INTE": "BERELINTE","BEREL INTE": "BERELINTE","BERELIN": "BERELINTE","BERELIN-":"BERELINTE",
        "BERELIN1":"BERELINTE","BEREL-INTE-":"BERELINTE","BEREL1NTE":"BERELINTE","BERELIN-1":"BERELINTE",

        "COMMEX":"COMEX","COMEXX":"COMEX","COMMEX1":"COMEX","COMEX-":"COMEX","COMMEX-X":"COMEX",
        "COMEXX-":"COMEX","COMEXX1":"COMEX","COMEX-1":"COMEX","COMEX-X-":"COMEX",

        "THERMOTEC":"THERMOTEK","TERMOTEK":"THERMOTEK","THERMOTECK":"THERMOTEK","TERMOTEC":"THERMOTEK",
        "THERMOTEC1":"THERMOTEK","THERMOTECX":"THERMOTEK","THERMOTEC-X":"THERMOTEK","THERMOTEC-X":"THERMOTEK",
        "THERMOTEK1":"THERMOTEK","THERMOTEK-X":"THERMOTEK","THERMOTEC-1":"THERMOTEK",
        
        "OSEL":"OSEL","OSELL":"OSEL","OSEL1":"OSEL","OSELLX":"OSEL","OSEL-":"OSEL","OSELL-":"OSEL",
        "OSELL1":"OSEL","OSELX":"OSEL","OSEL-X":"OSEL","OSELL-1":"OSEL","OSEL-X-":"OSEL",


        "SHERWINWILLIAMS":"SHERWIN WILLIAMS","SHERWIN":"SHERWIN WILLIAMS","SHERWIN-WILLIAMS":"SHERWIN WILLIAMS",
        "SHERWIN-WILL":"SHERWIN WILLIAMS","SHERWINWILLIAM":"SHERWIN WILLIAMS","SHERWILL":"SHERWIN WILLIAMS",
        "SHERW":"SHERWIN WILLIAMS","SHER-WILLIAMS":"SHERWIN WILLIAMS","SHERWIN-":"SHERWIN WILLIAMS",
        
        "VINIMEX":"VINIMEX","VYNIMEX":"VINIMEX","VINIMEX-":"VINIMEX","VINIEMEX":"VINIMEX","VIMINEX":"VINIMEX",
        "VYNIMEXX":"VINIMEX","VIMEX":"VINIMEX","VIMEXX":"VINIMEX","VINI-MEX":"VINIMEX",
        
        "LANCO":"LANCO","LANQO":"LANCO","LANCO-":"LANCO","LANKO":"LANCO","LANCOX":"LANCO","LACNO":"LANCO",
        "LANCO1":"LANCO","LANCO-X":"LANCO","LANKO-X":"LANCO",
        
        "PRISA":"PRISA","PRIZA":"PRISA","PRISSA":"PRISA","PRIZA-":"PRISA","PRISSA-":"PRISA","PRIS-":"PRISA",
        "PRISA1":"PRISA","PRISAX":"PRISA","PRIISA":"PRISA",
        
        "TYTAN":"TYTAN","TITAN":"TYTAN","TITAN-X":"TYTAN","TY-TAN":"TYTAN","TYTAAN":"TYTAN","TITAN1":"TYTAN",
        "TYTANX":"TYTAN","TYNAT":"TYTAN","T-TYTAN":"TYTAN",
        
        "LOCTITE":"LOCTITE","LOCTAIT":"LOCTITE","LOCTIT":"LOCTITE","LOCT-TITE":"LOCTITE","LOCTTITE":"LOCTITE",
        "LOCT1":"LOCTITE","LOCTITE1":"LOCTITE","LOCTT-":"LOCTITE","LOCTITEX":"LOCTITE",
        
        "POXIPOL":"POXIPOL","POXIPOLL":"POXIPOL","POXIPOLX":"POXIPOL","POXPOL":"POXIPOL","POXPOLX":"POXIPOL",
        "POXIPOL-":"POXIPOL","POXIPOL-1":"POXIPOL","POXIP-":"POXIPOL","POXIPOLL1":"POXIPOL",
        
        "SILKA":"SILKA","SILICA":"SILKA","SILICA-":"SILKA","SILKAA":"SILKA","SILK-X":"SILKA",
        "SILKX":"SILKA","SILK":"SILKA","SILKA-1":"SILKA","SILKA1":"SILKA",
        
        "BNDX":"BONDEX","BONDEXX":"BONDEX","BONDDEX":"BONDEX","BONDXX":"BONDEX","BND-EX":"BONDEX",
        "BONDEX-":"BONDEX","BONDEX1":"BONDEX","BNDX-":"BONDEX","BNDX-X":"BONDEX",
        
        "HNKEL":"HENKEL","HENKELL":"HENKEL","HENKL":"HENKEL","HENKEL-":"HENKEL","HENKELLX":"HENKEL",
        "HNKEL1":"HENKEL","HENKL-X":"HENKEL","HENK1":"HENKEL","HENKEX":"HENKEL",
        
        "RUO":"RUGO","RUGGO":"RUGO","RRUGO":"RUGO","RUGOO":"RUGO","RUG0":"RUGO",
        "RUGX":"RUGO","RUG-":"RUGO","RUG1":"RUGO","RUOG":"RUGO",
        
        "PATTEX":"PATTEX","PATEX":"PATTEX","PATTEX1":"PATTEX","PATTEX-X":"PATTEX","PATTEX-X1":"PATTEX",
        "PATTEX-":"PATTEX","PATTEX1-":"PATTEX","PATEX1":"PATTEX","PATT-EX":"PATTEX",
        
        "AKFIX":"AKFIX","ACFIX":"AKFIX","AKFIX-":"AKFIX","AKFIXX":"AKFIX","AKF-IX":"AKFIX",
        "AKFIX1":"AKFIX","AKFIX-X":"AKFIX","ACFIX-":"AKFIX","ACFIX1":"AKFIX",

        "KOLALOKA":"KOLA LOKA","KOLALOK":"KOLA LOKA","KOLA-LOKA":"KOLA LOKA","KOLA-LOK":"KOLA LOKA","COLA LOCA":"KOLA LOKA",
        "COLALOKA":"KOLA LOKA","KOLALOKA1":"KOLA LOKA","KOLALOCK":"KOLA LOKA","KOLALOKAS":"KOLA LOKA","KOLALOKA-":"KOLA LOKA",
        
        "CASAFACIL": "CAZAFACIL", "CAZA FACIL": "CAZAFACIL", "CASAFASIL": "CAZAFACIL", "CAZA-FACIL": "CAZAFACIL",
        "CAZAFASIL":"CAZAFACIL","CASAFACIL-":"CAZAFACIL","CAZAF1CIL":"CAZAFACIL","CAZFACIL":"CAZAFACIL","CZFACIL":"CAZAFACIL",
        "CAZAFACIL1":"CAZAFACIL","CZAFAFACIL":"CAZAFACIL","CFAZACIL":"CAZAFACIL","CFAZFACIL":"CAZAFACIL",
        
        "ANIKILL":"ANIKILL","ANIKIL":"ANIKILL","ANIKILL1":"ANIKILL","ANI-KILL":"ANIKILL","ANIK-ILL":"ANIKILL",
        
        "AVANT":"AVANTE","AVNT":"AVANTE","AVNT1":"AVANTE","AVANT-X":"AVANTE","AVANT-":"AVANTE","AVNTX":"AVANTE","AVANT1":"AVANTE",
        "AVANT2":"AVANTE","AVNT2":"AVANTE","AVANTE-":"AVANTE","AVNTE":"AVANTE","AVNTPLAST":"AVANTE","AVNTP":"AVANTE",
        
        "AVANTIPLASTIC":"AVANTI PLASTIC","AVANTIPLSTIC":"AVANTI PLASTIC","AVANTI-PLASTIC":"AVANTI PLASTIC","AVANTI-PLSTIC":"AVANTI PLASTIC",
        "AVANTIPLAST":"AVANTI PLASTIC","AVNT-PLASTIC":"AVANTI PLASTIC","AVANTI_P":"AVANTI PLASTIC","AVANTIPLAST-":"AVANTI PLASTIC",
        
        "GENEBRE":"GENEBRE","GENEBREE":"GENEBRE","GENEBR":"GENEBRE","GENEBREE1":"GENEBRE","GENEBRE-":"GENEBRE","GENEBREX":"GENEBRE",
        "GENEBR-E":"GENEBRE","GENEBR1":"GENEBRE","GENEBREEE":"GENEBRE","GENEBREE-":"GENEBRE",
        
        "DIKA":"DICA","DICCA":"DICA", "DICAA":"DICA", "DIICA":"DICA","DI-KA":"DICA","D-ICA":"DICA","DIC-X":"DICA",
        "DICKA":"DICA","DIKKA":"DICA","DCA":"DICA","DIAC":"DICA","DICA1":"DICA","DICA-":"DICA",
        
        "KOLER":"KOHLER","KOLHER":"KOHLER", "KOHER":"KOHLER","KOHLLER":"KOHLER","KOHLER-":"KOHLER","KHLER":"KOHLER",
        "KHLER1":"KOHLER","KOHLE":"KOHLER","KOHLERX":"KOHLER","KOHLER1":"KOHLER","KOH-ER":"KOHLER",
        
        "HLVX":"HELVEX","HELVEXX":"HELVEX","HELVX":"HELVEX","HLVEX":"HELVEX","HELVEEX":"HELVEX","HEELVEX":"HELVEX",
        "HELVEX-":"HELVEX","HELVEXX1":"HELVEX","HL-VEX":"HELVEX","HELVEEX-":"HELVEX","HEL-VEEX":"HELVEX",
        "HLVEX1":"HELVEX","HELVE":"HELVEX","HELVEXXX":"HELVEX",
        
        "TOTO":"TOTO","TOTTO":"TOTO","TOT0":"TOTO","T-TOTO":"TOTO","TOTO1":"TOTO","TOTO-":"TOTO","T-TOTO":"TOTO","TOTOO":"TOTO",

        "CALOREX":"CALOREX","CALOREKS":"CALOREX","CALOREK":"CALOREX","CALOREX1":"CALOREX","CALORREX":"CALOREX","CALOX":"CALOREX",
        "CALORIX":"CALOREX","CALOR3X":"CALOREX","CALOREX-":"CALOREX","CALOREXS":"CALOREX","CALORREKS":"CALOREX",
        
        "CINSA":"CINSA","CINZA":"CINSA","CIN1SA":"CINSA","CINSAS":"CINSA","CIN-ZA":"CINSA","CINSA-":"CINSA","CINZAS":"CINSA",
        "CINSA1":"CINSA","C1NSA":"CINSA","CINZ":"CINSA","CINZA1":"CINSA",
        
        "RHEEM":"RHEEM","REEM":"RHEEM","REEM1":"RHEEM","RHE1M":"RHEEM","RH-EM":"RHEEM","RHEEMS":"RHEEM","RH-M":"RHEEM",
        "REHM":"RHEEM","RHEEMX":"RHEEM","RHEEEM":"RHEEM",
        
        "PHLPS":"PHILLIPS","PHILIPS":"PHILLIPS","FILIPS":"PHILLIPS","PHLIPS":"PHILLIPS","PHILLIP":"PHILLIPS","PHILIP":"PHILLIPS",
        "PHILPS":"PHILLIPS","PHIPLLIPS":"PHILLIPS","PHILLIPS-":"PHILLIPS","PHILLIPSS":"PHILLIPS","PHILPS1":"PHILLIPS",
        "PHILLPS":"PHILLIPS","P-HILLIPS":"PHILLIPS","PHILPS-":"PHILLIPS","PHLPS1":"PHILLIPS",
        
        "YALE":"YALE","YALLE":"YALE","YALL":"YALE","YAL":"YALE","YALE-":"YALE","YAL1":"YALE","YALLES":"YALE","YALL-E":"YALE",
        "YAL1E":"YALE","YAL-LE":"YALE","YLL":"YALE","YALX":"YALE",
        
        "KWIKSET":"KWIKSET","KWICKSET":"KWIKSET","KWISET":"KWIKSET","KWIK1SET":"KWIKSET","KWIKSEt":"KWIKSET","KWIK-S": "KWIKSET",
        "KWIKSET-":"KWIKSET","KWIK-SET":"KWIKSET","KWIKSETS":"KWIKSET","K-WIKSET":"KWIKSET","KWIK-SET":"KWIKSET",
        
        "TESA":"TESA","TESAA":"TESA","TESSA":"TESA","TESA1":"TESA","T-E-SA":"TESA","TE-SA":"TESA","TESAS":"TESA","TESAA-":"TESA",
        "TESAA1":"TESA","TESA-1":"TESA","TESA2":"TESA","TES-X":"TESA","TE-SA1":"TESA",
        
        "ASSA ABLOY":"ASSA ABLOY","ASSABLOY":"ASSA ABLOY","ASSA-ABLOY":"ASSA ABLOY","ASSAABLOY":"ASSA ABLOY",
        "ASSAABOY":"ASSA ABLOY","ASSA-ABLOY1":"ASSA ABLOY","ASSAABOY1":"ASSA ABLOY","ASSA-ABOY":"ASSA ABLOY",
        
        "JAKO":"JAKO","JACO":"JAKO","JAKO1":"JAKO","JAK0":"JAKO","JAKO-":"JAKO","JAKOS":"JAKO","JAK-0":"JAKO",
        "JACO-":"JAKO","JAK0S":"JAKO","JAKOS1":"JAKO","JAKO-S":"JAKO",
        
        "SCHLAGE":"SCHLAGE","SHLAGE":"SCHLAGE","SHLAG":"SCHLAGE","SCH1LAGE":"SCHLAGE","SCHLAGE1":"SCHLAGE","SCHLAGE-":"SCHLAGE",
        "SCHALE":"SCHLAGE","SCHAGLE":"SCHLAGE","SCHLAG1":"SCHLAGE","SCH-AGE":"SCHLAGE","SCHLAGE-X":"SCHLAGE",

        "SOPRANO":"SOPRANO","SOPRANOX":"SOPRANO","SOPRAN":"SOPRANO","SOPRAN0":"SOPRANO","S0PRANO":"SOPRANO","SOPRANO1":"SOPRANO",
        "SOPRANO-":"SOPRANO","SOPRANOS":"SOPRANO","S0PRAN":"SOPRANO","S0PRAN0":"SOPRANO","SOPX":"SOPRANO",
        
        "NORTON":"NORTON","NORTTON":"NORTON","NORTON1":"NORTON","NORON":"NORTON","NORT-ON":"NORTON","NRTON":"NORTON",
        "NRTON1":"NORTON","NOR-TON":"NORTON","N0RTON":"NORTON","NORTONX":"NORTON","NORT0N":"NORTON","NRTTON":"NORTON",
        
        "HAFELE":"HAFELE","HAFELEE":"HAFELE","HAFELE1":"HAFELE","HAFELLE":"HAFELE","HAFELE-X":"HAFELE","HAFELES":"HAFELE",
        "HAFELE-":"HAFELE","HAFEELE":"HAFELE","HAFEL":"HAFELE","HAF1LE":"HAFELE","HAFLEE":"HAFELE","HAFELES-":"HAFELE",
        
        "LINC":"LINCE","LINSE":"LINCE","LICE":"LINCE","LIN-CE":"LINCE","LINCE1":"LINCE","LINC1":"LINCE","LINCES":"LINCE",
        "L1NCE":"LINCE","LINCE-":"LINCE","LINCE-X":"LINCE","LINC-":"LINCE","LINCEX":"LINCE","LINSE1":"LINCE",
        
        "MASTER LOK":"MASTER LOCK","MASTERLOK":"MASTER LOCK","MASTER LOC":"MASTER LOCK","MASTERLOCK":"MASTER LOCK",
        "MASTERS LOCK":"MASTER LOCK","MAST-LOCK":"MASTER LOCK","MASTLOK":"MASTER LOCK","MASTER-LOCK":"MASTER LOCK","MASTERLOC":"MASTER LOCK",
        "MSTERLOCK":"MASTER LOCK","M-LOCK":"MASTER LOCK","MAST1LOCK":"MASTER LOCK","MASTERL0CK":"MASTER LOCK","MAST LOC":"MASTER LOCK",
        
        "GODREJ":"GODREJ","GODREJJ":"GODREJ","GODREJ1":"GODREJ","GODJRE":"GODREJ","GODJREJ":"GODREJ","G0DREJ":"GODREJ",
        "GODJ":"GODREJ","GODREJ-":"GODREJ","GODEJ":"GODREJ","GOD-REJ":"GODREJ","G0D-REJ":"GODREJ",
        
        "DXSON":"DEXSON","DEXON":"DEXSON","DEXS0N":"DEXSON","D3XSON":"DEXSON","DXS0N":"DEXSON","D3X-SON":"DEXSON",
        "D-XSON":"DEXSON","DX0N":"DEXSON","DEXO":"DEXSON","D-X-SON":"DEXSON","DEX-S0N":"DEXSON",
        
        "FLGORE":"FULGORE","FULGOREX":"FULGORE","FULGR":"FULGORE","FULGORE-":"FULGORE","FLUGORE":"FULGORE","FULGORE":"FULGORE",
        "FLG0RE":"FULGORE","FULGORES":"FULGORE","FULGRX":"FULGORE","FULGO":"FULGORE","FULGORE1":"FULGORE","FULGORE1X":"FULGORE",

        "SRTK":"SURTEK","SURTE":"SURTEK","SURTK":"SURTEK","ZURTEK":"SURTEK","SURTEC":"SURTEK","SURTECK":"SURTEK",
        "SRTK-":"SURTEK","SURT-EK":"SURTEK","SURETK":"SURTEK","SUR-TK":"SURTEK","SURT-EC":"SURTEK","SUTERK":"SURTEK",
        "SUTEK":"SURTEK","SUTERK-":"SURTEK","SUR-TEK":"SURTEK","S-URTEK":"SURTEK","SURTEKX":"SURTEK",
        
        "LIONTOLS": "LION TOOLS", "LIONTOOLS": "LION TOOLS", "LION-TOOLS": "LION TOOLS", "LION TOLS": "LION TOOLS", 
        "LION-TOLS": "LION TOOLS", "LIONTOOL": "LION TOOLS", "LION TOOLS-": "LION TOOLS", "LION-TOOLSX": "LION TOOLS",
        "LION TOOLS1": "LION TOOLS", "L1ON-TOOLS": "LION TOOLS", "LION-TL": "LION TOOLS", "LION TOOLS X": "LION TOOLS", 
        "L-TOLS": "LION TOOLS", "L-TLS": "LION TOOLS","LION TL": "LION TOOLS", 
        
        "3M": "3M", "3-M": "3M", "3 M": "3M", "3-M1": "3M", "M3": "3M", "M-3": "3M", "M-3-": "3M", 
        "3-M-": "3M", "3M1": "3M", "3M1X": "3M", "3-M1X": "3M", "3-MX": "3M", "3 M1": "3M",
        
        "3EN1": "3EN1", "3 EN 1": "3EN1", "3EN-1": "3EN1", "3N1": "3EN1", "3EN1X": "3EN1", "3-EN1": "3EN1",
        "3E1N": "3EN1", "3EN": "3EN1", "EN-1": "3EN1", "E-3EN1": "3EN1", "EN1": "3EN1", "EN-1X": "3EN1",
        
        "GOOGWILL": "GOODWILL", "GOODWIL": "GOODWILL", "GODWILL": "GOODWILL", "GOO-WILL": "GOODWILL", 
        "G0ODWILL": "GOODWILL", "GOODWILLX": "GOODWILL", "GOOG-WILL": "GOODWILL", "GOD-WILL": "GOODWILL", 
        "GOOD-WILL": "GOODWILL", "GO0D-WILL": "GOODWILL", "G0ODWILL": "GOODWILL", "GODWILLX": "GOODWILL"
    }

    articulos_sin_pim[TIENDA_CATALOGO_MARCA] = articulos_sin_pim[TIENDA_CATALOGO_MARCA].replace(marcasyfabricantes_reemplazo)
    # articulos_sin_pim['FABRICANTE'] = articulos_sin_pim['FABRICANTE'].replace(marcasyfabricantes_reemplazo)
    articulos_con_pim[TIENDA_CATALOGO_MARCA] = articulos_con_pim[TIENDA_CATALOGO_MARCA].replace(marcasyfabricantes_reemplazo)
    # articulos_con_pim['FABRICANTE'] = articulos_con_pim['FABRICANTE'].replace(marcasyfabricantes_reemplazo)

    def unused():
        # Diccionario de reemplazo para normalizar descripciones de artículos
        variaciones_reemplazo = {
            "WC": "SANITARIO", "INODORO": "SANITARIO", "BANO": "SANITARIO", "W.C.": "SANITARIO", "TOILET": "SANITARIO",
            "RETRETE": "SANITARIO", "EXCUSADO": "SANITARIO", 
            
            "CUNA": "ESPATULA", "LAINA": "ESPATULA", "ESPATULIN": "ESPATULA", "RAZETA": "ESPATULA",
            "RASPADOR": "ESPATULA", "RASCADOR": "ESPATULA",
            
            "SONOTUBO": "TUBO PARA CIMBRA", "TUBO CIMBRA": "TUBO PARA CIMBRA", "MOLDE TUBULAR": "TUBO PARA CIMBRA",
            "TUBO CARTON": "TUBO PARA CIMBRA", "TUBO ENCOFRADO": "TUBO PARA CIMBRA", "TUBO DE ENCOFRADO": "TUBO PARA CIMBRA",

            "ADHESIVO": "PEGAMENTO", "PEGANTE": "PEGAMENTO","RESISTOL": "PEGAMENTO",

            "MOPA": "TRAPEADOR", "TRAPERO": "TRAPEADOR", "MECHUDO": "TRAPEADOR", "FREGONA": "TRAPEADOR", "LIMPION": "TRAPEADOR",
            "MOP": "TRAPEADOR", "MOPERO": "TRAPEADOR", "MOPA DE HILO": "TRAPEADOR", "MOPA PLANA": "TRAPEADOR",

            "LAMPARA": "FOCO", "LUMINARIO": "FOCO", "BOMBILLA": "FOCO", "BOMBILLO": "FOCO", "LUZ LED": "FOCO",
            "LAMPARA LED": "FOCO", "BOMBILLO LED": "FOCO", "FOCO LED": "FOCO",
            
            "ADAPTADOR": "CONECTOR", "CONEXION": "CONECTOR", "CONECTADOR": "CONECTOR", "ENLACE": "CONECTOR",
            "EMBONE": "CONECTOR", "PLUG": "CONECTOR", "JACK": "CONECTOR",
            "EMPALME": "CONECTOR", "INTERFACE": "CONECTOR",

            "MANGUERA CORRUGADA": "MANGUERA FLEXIBLE", "MANGUERA EXPANDIBLE": "MANGUERA FLEXIBLE", 
            "MANGUERA EXTENSIBLE": "MANGUERA FLEXIBLE", "DUCTO FLEXIBLE": "MANGUERA FLEXIBLE", "MANGUERA ONDULADA": "MANGUERA FLEXIBLE",

            "VALVULA": "LLAVE", "LLAVE DE PASO": "LLAVE", "LLAVE DE CIERRE": "LLAVE", "GRIFO": "LLAVE", "TORNILLO DE PASO": "LLAVE",
            "LLAVE REGULADORA": "LLAVE", "VALVULA REGULADORA": "LLAVE", "VALVULA DE PASO": "LLAVE", "VALVULA CIERRE": "LLAVE",

            "DESTORNILLADOR": "DESARMADOR", "DESATORNILLADOR": "DESARMADOR", "DESARMADOR": "DESARMADOR",

            "ALICATE": "PINZA", "TENAZA": "PINZA",

            "INTERRUPTOR": "APAGADOR", "APAGADOR": "APAGADOR", "SWITCH": "APAGADOR",

            "CINTA ELECTRICA": "CINTA AISLANTE",

            "TUBERIA PVC": "TUBO PVC",

            "CERROJO": "CANDADO",

            "DISCO DE CORTE": "DISCO ABRASIVO", "DISCO ESMERIL": "DISCO ABRASIVO", "DISCO DE ESMERIL": "DISCO ABRASIVO"
        }

        # Función para reemplazar palabras específicas en las descripciones
        def normalizar_descripcion(texto, diccionario):
            if isinstance(texto, str):
                for palabra, reemplazo in diccionario.items():
                    texto = texto.replace(palabra, reemplazo)
            return texto

        # Aplicar normalización en las columnas 'NOMBRE' y 'NOMBRE_SKU'
        articulos_sin_pim[TIENDA_NOMBRE] = articulos_sin_pim[TIENDA_NOMBRE].apply(lambda x: normalizar_descripcion(x, variaciones_reemplazo))
        articulos_con_pim[CATALOGO_NOMBRE_SKU] = articulos_con_pim[CATALOGO_NOMBRE_SKU].apply(lambda x: normalizar_descripcion(x, variaciones_reemplazo))
        pass

    return articulos_con_pim, articulos_sin_pim


# Diccionario de reemplazos
replacements = {
    r'\bmts3\b': 'metros cubicos', r'\bmt3\b': 'metros cubicos', r'\bm3\b': 'metros cubicos',
    r'\bmts2\b': 'metros cuadrados', r'\bmt2\b': 'metros cuadrados', r'\bm2\b': 'metros cuadrados',
    r'\bmts\b': 'metros', r'\bmto\b': 'metros', r'\bmt\b': 'metros', r'\bm\b': 'metros',
    r'\bkgms\b': 'kilogramos', r'\bkgs\b': 'kilogramos', r'\bkgm\b': 'kilogramos', r'\bkg\b': 'kilogramos',
    r'\bmm3\b': 'milimetros cubicos',
    r'\bmm2\b': 'milimetros cuadrados',
    r'\bmm\b': 'milimetros',
    r'\bcm3\b': 'centimetros cubicos',
    r'\bcm2\b': 'centimetros cuadrados',
    r'\bcm\b': 'centimetros',
    r'\bgrs\b': 'gramos', r'\bgr\b': 'gramos', r'\bgm\b': 'gramos', r'\bg\b': 'gramos',
    r'\bml\b': 'mililitros',
    r'\blts\b': 'litros', r'\blt\b': 'litros', r'\bl\b': 'litros',
    r'\bpcs\b': 'pieza', r'\bpz\b': 'pieza', r'\bpc\b': 'pieza', r'\bpzs\b': 'pieza', r'\bpzas\b': 'pieza', r'\bea\b': 'pieza', r'\bpza\b': 'pieza',
    r'\bgal\b': 'galones',
    r'\bft\b': 'pies',
    r'\bplg\b': 'pulgadas',
    r'\bjgo\b': 'juego', r'\bjg\b': 'juego',
    r'\bcaj\b': 'caja', r'\bcaja\b': 'caja', r'\bcja\b': 'caja',
    
    r'\bno.\b': 'numero', r'\bno\b': 'numero', r'\bnum\b': 'numero',
    r'\bcal(\d+)\b': r'calibre \1', r'\bc-(\d+)\b': r'calibre \1', r'(\s)c(\d+)\b': r' calibre \2',
    r'\bcal.\b': 'calibre', r'\bcal\b': 'calibre', r'\bc-\b': 'calibre',

    r'\bcbt\b': 'cubeta',
    r'\bw.c.\b': 'baño', r'\bw.c\b': 'baño', r'\bwc\b': 'baño',

    r'(\d)mts3\b': r'\1 metros cubicos', r'(\d)mt3\b': r'\1 metros cubicos', r'(\d)m3\b': r'\1 metros cubicos',
    r'(\d)mts2\b': r'\1 metros cuadrados', r'(\d)mt2\b': r'\1 metros cuadrados', r'(\d)m2\b': r'\1 metros cuadrados',
    r'(\d)mts\b': r'\1 metros', r'(\d)mto\b': r'\1 metros', r'(\d)mt\b': r'\1 metros', r'(\d)m\b': r'\1 metros',
    r'(\d)kgms\b': r'\1 kilogramos', r'(\d)kgs\b': r'\1 kilogramos', r'(\d)kgm\b': r'\1 kilogramos', r'(\d)kg\b': r'\1 kilogramos',
    r'(\d)mm3\b': r'\1 milimetros cubicos',
    r'(\d)mm2\b': r'\1 milimetros cuadrados',
    r'(\d)mm\b': r'\1 milimetros',
    r'(\d)cm3\b': r'\1 centimetros cubicos',
    r'(\d)cm2\b': r'\1 centimetros cuadrados',
    r'(\d)cm\b': r'\1 centimetros',
    r'(\d)grs\b': r'\1 gramos', r'(\d)gr\b': r'\1 gramos', r'(\d)gm\b': r'\1 gramos',r'(\d)g\b': r'\1 gramos',
    r'(\d)ml\b': r'\1 mililitros',
    r'(\d)lts\b': r'\1 litros', r'(\d)lt\b': r'\1 litros', r'(\d)l\b': r'\1 litros',
    r'(\d)pcs\b': r'\1 pieza', r'(\d)pz\b': r'\1 pieza', r'(\d)pc\b': r'\1 pieza', r'(\d)pzs\b': r'\1 pieza', r'(\d)pzas\b': r'\1 pieza', r'(\d)ea\b': r'\1 pieza',  r'(\d)pza\b': r'\1 pieza',
    r'(\d)gal\b': r'\1 galones',
    r'(\d)ft\b': r'\1 pies',
    r'(\d)plg\b': r'\1 pulgadas',
    
    r'\bno.(\d)': r'numero \1', r'\bno(\d)': r'numero \1', r'\bnum(\d)': r'numero \1',

    r'\btipo (i|uno|l)\b': 'tipo 1', r'\btipo (ii|dos|ll|li|il)\b': 'tipo 2',
    r'\btipo (iii|tres|lll|lii|ili|iil|lli|ill|lil)\b': 'tipo 3',

    r'\bclase (i|uno|l)\b': 'clase 1', r'\bclase (ii|dos|ll|li|il)\b': 'clase 2',
    r'\bclase (iii|tres|lll|lii|ili|iil|lli|ill|lil)\b': 'clase 3',

}
compiled_replacements = {re.compile(pattern): replacement for pattern, replacement in replacements.items()}

def clean_text(sentence):
    """
    Limpia una oración de texto.
    Input:
        sentence: str, oración de texto.
    Output:
        sentence: str, oración de texto limpia.
    """

    # Todo a lowercase
    if sentence:
        sentence = sentence.lower()
    else:
        sentence = ''

    # Quitar acentos
    sentence = unidecode(sentence)

    # Reemplaza 'x' y '*' con 'por' cuando esté entre numeros
    sentence = re.sub(r'(\d+(\.\d+)?)\s*[x\*]\s*(\d+(\.\d+)?)', r'\1 por \3', sentence)
    
    # Cuando hay mas espacios 'x' o '*'
    sentence = re.sub(r'(\d+(\.\d+)?)\s*[x\*](\s+)(\d+(\.\d+)?)', r'\1 por \4', sentence)
    sentence = re.sub(r'(\d+(\.\d+)?)(\s+)[x\*](\d+(\.\d+)?)', r'\1 por \4', sentence)
    
    # 'x 2' or '* 2'
    sentence = re.sub(r'(["\'])[x\*](\s*)(\d+(\.\d+)?)', r'\1 por \3', sentence)
    
    # 'a x b x c' or 'a * b * c'
    sentence = re.sub(r'(\d+(\.\d+)?)(\s*)[x\*](\s*)(\d+(\.\d+)?)(\s*)[x\*](\s*)(\d+(\.\d+)?)', r'\1 por \5 por \9', sentence)

    # Handle cases like '2.50 x.63 calibre 11'
    sentence = re.sub(r'(\d+(\.\d+)?)\s*[x\*]\.(\d+)', r'\1 por 0.\3', sentence)
    
    # Handle cases like 'Mexalit, Lámina Rural 1.25X.6, Pieza'
    sentence = re.sub(r'(\d+(\.\d+)?)(\s*)[x\*](\s*)\.(\d+)', r'\1 por 0.\5', sentence)
    
    # Handle cases like 'Fanosa, Caseton .60X.60X.40, Pieza'
    sentence = re.sub(r'\.(\d+)\s*[x\*]\.(\d+)\s*[x\*]\.(\d+)', r'0.\1 por 0.\2 por 0.\3', sentence)

    # ″ -> pulgadas
    sentence = re.sub(r'″', ' pulgadas', sentence)

    # " -> pulgadas
    sentence = re.sub(r'(?<!\w)(\d+)\s*\"\s*(?!\w)', r'\1 pulgadas ', sentence)

    # ' -> pies
    sentence = re.sub(r'(?<!\w)(\d+)\s*\'\s*(?!\w)', r'\1 pies ', sentence)

    # Reemplazar las palabras clave
    for pattern, replacement in compiled_replacements.items():
        sentence = pattern.sub(replacement, sentence)

    # Tener espacios entre números y letras
    sentence = re.sub(r'([a-z])(\d)', r'\1 \2', sentence)  # e.g., cpc30rb -> cpc 30rb

    # Tener espacios entre números y letras (al revés)
    sentence = re.sub(r'(\d)([a-z])', r'\1 \2', sentence)  # e.g., 30rb -> 30 rb

    # Agregar espacios después de comas
    sentence = re.sub(r'\s*,\s*', ', ', sentence)

    # Remover espacios extras
    sentence = re.sub(r'\s+', ' ', sentence)

    # Asegurar que no hayan palabras pegadas como 'calibre12', 'fieroalambre', 'cpc30rb', etc.
    sentence = re.sub(r'([a-zA-Z])([0-9])', r'\1 \2', sentence)
    sentence = re.sub(r'([0-9])([a-zA-Z])', r'\1 \2', sentence)

    # Reemplazar 'x' con 'por', despues de tener espacios
    sentence = re.sub(r'\s+x\s+', ' por ', sentence)
    sentence = re.sub(r'\s+\*\s+', ' por ', sentence)

    # Reemplazar 'x' con 'por', si se quedan pegados con medidas y cuando no hay - antes
    sentence = re.sub(r'(?<!-)\bcmx\b','centimetros por',sentence)
    sentence = re.sub(r'(?<!-)\bmx\b', 'metros por', sentence)
    sentence = re.sub(r'(?<!-)\bmtx\b','metros por',sentence)
    sentence = re.sub(r'(?<!-)\bmtsx\b','metros por',sentence)
    sentence = re.sub(r'(?<!-)\bmmx\b','milimetros por',sentence)
    sentence = re.sub(r'(?<!-)\degx\b','deg por',sentence)

    # Reemplazar \" con pulgadas y \' con pies
    sentence = re.sub(r'\\"', ' pulgadas', sentence)
    sentence = re.sub(r"\\'", ' pies', sentence)

    # pies' -> pulgadas
    sentence = re.sub(r'pies\'', 'pulgadas', sentence)

    # Reemplazar 'bco' con 'blanco'
    sentence = re.sub(r'\bbco\b', 'blanco', sentence)

    # Borrar '#'
    sentence = re.sub(r'\#', '', sentence)

    # calibre. -> calibre 
    sentence = re.sub(r'calibre\.', 'calibre ', sentence)

    # deg -> grados
    sentence = re.sub(r'\bndeg\b', 'grados', sentence)
    sentence = re.sub(r'\bdeg\b', 'grados', sentence)

    # Reemplazar 'c/' con 'con'
    sentence = re.sub(r'\bc/\b', 'con ', sentence)

    # Reemplazar 's/' con 'sin'
    sentence = re.sub(r'\bs/\b', 'sin ', sentence)

    # Reemplazar 'p/' con 'para'
    sentence = re.sub(r'\bp/\b', 'para ', sentence)

    # Remover '(r)'
    sentence = re.sub(r'\(r\)', '', sentence)

    # Remover espacios extras
    sentence = re.sub(r'\s+', ' ', sentence)

    return sentence


def obtener_embeddings_fabricante(names, batch_size):
    """
    Obtiene los embeddings de los nombres de los fabricantes.
    Input:
        names: list, lista de nombres de fabricantes.
        batch_size: int, tamaño de los batches.
    Output:
        embeddings: list, lista de embeddings de los nombres de los fabricantes.
    """
    
    embeddings = []
    for i in (range(0, len(names), batch_size)):
        batch = names[i:i + batch_size]
        embeddings_batch = client.embeddings.create(
            input=batch,
            model="CNS_Construsync_02_ada002"
        )
        response_json = embeddings_batch.model_dump_json(indent=2)
        response_dict = json.loads(response_json)
        batch_embeddings = [r['embedding'] for r in response_dict['data']]
        embeddings.extend(batch_embeddings)
            
    return embeddings


def calc_similarity(tienda_embeddings, catalogo_embeddings, k):
    """
    Calcula la similitud entre los embeddings de la tienda y los embeddings del catálogo.
    Input:
        tienda_embeddings: list, lista de embeddings de la tienda.
        catalogo_embeddings: list, lista de embeddings del catálogo.
        k: int, número de resultados a devolver.
    Output:
        D: list, lista de similitudes.
        I: list, lista de índices de los resultados.
    """

    tienda_embeddings_matrix = np.array(tienda_embeddings).astype('float32')
    catalogo_embeddings_matrix = np.array(catalogo_embeddings).astype('float32')

    if tienda_embeddings_matrix.shape[0] == 0 or catalogo_embeddings_matrix.shape[0] == 0:
        return None

    # normalize_L2 -> Normaliza las filas de la matriz para que tengan norma L2 igual a 1.
    # norma L2 -> raíz cuadrada de la suma de los cuadrados de los elementos de un vector.
    faiss.normalize_L2(tienda_embeddings_matrix)
    faiss.normalize_L2(catalogo_embeddings_matrix)

    # El índice FAISS -> índice de búsqueda que se utiliza para buscar vecinos más cercanos.
    index = faiss.IndexFlatIP(catalogo_embeddings_matrix.shape[1])
    index.add(catalogo_embeddings_matrix)

    # k -> número de resultados a devolver
    D, I = index.search(tienda_embeddings_matrix, k)

    return D.flatten().tolist(), I.flatten().tolist()  # Convertir a listas


def match_fabricante_producto(df_tienda, df_catalogo, batch_size, embeddings_for_fabricante, embeddings_fabricante_path, catalogo_embeddings):
    """
    Realiza el match de los productos de la tienda con los productos del catálogo por código de fabricante.
    Si se especifica, se obtienen embeddings para los fabricantes.
    Los que tienen código de fabricante y no hay match (marca o unidad diferentes), se comparan con embeddings por catalogo[marca], tienda[nombre] y catalogo[unidad de medida].
    Input:
        df_tienda: DataFrame, productos de la tienda.
        df_catalogo: DataFrame, productos del catálogo.
        batch_size: int, tamaño de los batches.
        embeddings_for_fabricante: bool, si se deben obtener embeddings para los fabricantes.
        embeddings_fabricante_path: str, ruta del archivo con los embeddings de los fabricantes.
        catalogo_embeddings_path: str, ruta del archivo con los embeddings del catálogo.
    Output:
        results: list, lista de resultados del match.
        not_found: list, lista de productos no encontrados.
        fabricante_bad_marca_bad_unidad: list, lista de productos con fabricante, marca y unidad de medida incorrectos.
    """
    
    tienda_numero_fabricante = df_tienda[TIENDA_NUMERO_FABRICANTE]
    tienda_nombre = df_tienda[TIENDA_NOMBRE]
    tienda_marca = df_tienda[TIENDA_CATALOGO_MARCA]
    tienda_unidad_medida = df_tienda[TIENDA_UNIDAD_MEDIDA]

    catalogo_codigo_sku = df_catalogo[CATALOGO_CODIGO_SKU]
    catalogo_numero_fabricante = df_catalogo[CATALOGO_NUMERO_FABRICANTE]
    catalogo_nombre_sku = df_catalogo[CATALOGO_NOMBRE_SKU]
    catalogo_marca = df_catalogo[TIENDA_CATALOGO_MARCA]
    catalogo_unidad_medida = df_catalogo[CATALOGO_UNIDAD_MEDIDA]

    catalogo_dict = {
        numero_fabricante: (codigo_sku, nombre_sku, marca, unidad_medida)
        for numero_fabricante, codigo_sku, nombre_sku, marca, unidad_medida in zip(
            catalogo_numero_fabricante, catalogo_codigo_sku, catalogo_nombre_sku, catalogo_marca, catalogo_unidad_medida
        )
    }
    def catalogo_dict_structure():
        """
            {
                CF1: ('SKU1', 'Nombre1', 'Marca1', 'Unidad1'),
                CF2: ('SKU2', 'Nombre2', 'Marca2', 'Unidad2'),
                CF3: ('SKU3', 'Nombre3', 'Marca3', 'Unidad3')
            }
        """
        pass

    results, not_found, fabricante_bad_marca_bad_unidad = [], [], []
    # Si es match añadir a results, si no, añadir a not_found
    # Si es match y tiene unidades y marcas diferentes, añadir a fabricante_bad_marca_bad_unidad
    for i, fabricante in enumerate(tienda_numero_fabricante):
        if fabricante.strip() in catalogo_dict and fabricante.strip() != 'nan':
            is_same_marcas = tienda_marca[i].lower() == catalogo_dict[fabricante.strip()][2].lower()
            is_same_unidades = tienda_unidad_medida[i].lower() == catalogo_dict[fabricante.strip()][3].lower()
            match_result = {
                CODIGO_FABRICANTE_TIENDA: fabricante,
                NOMBRE_TIENDA: tienda_nombre[i],
                CODIGO_FABRICANTE_CATALOGO: fabricante.strip(),
                SKU_CATALOGO: catalogo_dict[fabricante.strip()][0],
                NOMBRE_CATALOGO: catalogo_dict[fabricante.strip()][1],
                MARCA_TIENDA: tienda_marca[i],
                MARCA_CATALOGO: catalogo_dict[fabricante.strip()][2],
                UNIDAD_TIENDA: tienda_unidad_medida[i],
                UNIDAD_CATALOGO: catalogo_dict[fabricante.strip()][3],
                PORCENTAJE_TOTAL: None,
                RAZON: 'Código de Fabricante'
            }
            if embeddings_for_fabricante and is_same_unidades and is_same_marcas:
                results.append(match_result)
            else:
                if not embeddings_for_fabricante:
                    results.append(match_result)
                else:
                    fabricante_bad_marca_bad_unidad.append(match_result)
        else:
            not_found.append({
                CODIGO_FABRICANTE_TIENDA: fabricante,
                NOMBRE_TIENDA: tienda_nombre[i],
                MARCA_TIENDA: tienda_marca[i],
                UNIDAD_TIENDA: tienda_unidad_medida[i],
            })

    if embeddings_for_fabricante:
        names = []
        for i, fabricante in enumerate(fabricante_bad_marca_bad_unidad):
            names.append(clean_text(f"{fabricante[MARCA_CATALOGO]}, {fabricante[NOMBRE_TIENDA]}, {fabricante[UNIDAD_CATALOGO]}")) 

        tienda_embeddings = obtener_embeddings_fabricante(names, batch_size)
    
        D, I = calc_similarity(tienda_embeddings, catalogo_embeddings, 1)

        # print(f"Length of fabricante_bad_marca_bad_unidad: {len(fabricante_bad_marca_bad_unidad)}")
        # print(f"Length of tienda embeddings: {len(tienda_embeddings)}")

        for i, fabricante in enumerate(fabricante_bad_marca_bad_unidad):
            if i < len(I) and I[i] < len(catalogo_nombre_sku):
                results.append({
                    CODIGO_FABRICANTE_TIENDA: fabricante[CODIGO_FABRICANTE_TIENDA],
                    NOMBRE_TIENDA: fabricante[NOMBRE_TIENDA],
                    CODIGO_FABRICANTE_CATALOGO: fabricante[CODIGO_FABRICANTE_CATALOGO],
                    SKU_CATALOGO: catalogo_codigo_sku[I[i]],
                    NOMBRE_CATALOGO: catalogo_nombre_sku[I[i]],
                    MARCA_TIENDA: fabricante[MARCA_TIENDA],
                    MARCA_CATALOGO: catalogo_marca[I[i]],
                    UNIDAD_TIENDA: fabricante[UNIDAD_TIENDA],
                    UNIDAD_CATALOGO: catalogo_unidad_medida[I[i]],
                    PORCENTAJE_TOTAL: round(D[i] * 100),
                    RAZON: 'Código de Fabricante + Embeddings'
                })

            else:
                # print(f"Index out of range: i={i}, I[i]={I[i] if i < len(I) else 'N/A'}")
                pass

    return results, not_found


def match_por_nombre(not_found, df_catalogo, batch_size, tienda_embeddings_path, catalogo_embeddings):
    """
    Realiza el match de los productos de la tienda no encontrados con los productos del catálogo por nombre.
    Input:
        not_found: list, lista de productos no encontrados.
        df_catalogo: DataFrame, productos del catálogo.
        batch_size: int, tamaño de los batches.
        tienda_embeddings_path: str, ruta del archivo con los embeddings de la tienda.
        catalogo_embeddings_path: str, ruta del archivo con los embeddings del catálogo.
    Output:
        results: list, lista de resultados del match.
        embeddings_true: int, cantidad de productos con match correcto.
    """

    tienda_nombre = [item[NOMBRE_TIENDA] for item in not_found]
    tienda_marca = [item[MARCA_TIENDA] for item in not_found]
    tienda_unidad_medida = [item[UNIDAD_TIENDA] for item in not_found]
    codigo_fabricante = [item[CODIGO_FABRICANTE_TIENDA] for item in not_found]

    catalogo_codigo_fabricante = df_catalogo[CATALOGO_NUMERO_FABRICANTE]
    catalogo_codigo_sku = df_catalogo[CATALOGO_CODIGO_SKU]
    catalogo_nombre_sku = df_catalogo[CATALOGO_NOMBRE_SKU]
    catalogo_marca = df_catalogo[TIENDA_CATALOGO_MARCA]
    catalogo_unidad_medida = df_catalogo[CATALOGO_UNIDAD_MEDIDA]

    tienda_text = []
    for i, marca in enumerate(tienda_marca):
        tienda_text.append(clean_text(f'{marca}, {tienda_nombre[i]}, {tienda_unidad_medida[i]}'))
    tienda_embeddings = obtener_embeddings_fabricante(tienda_text, batch_size)

    results = []

    similarity_scores, best_match_indices = calc_similarity(tienda_embeddings, catalogo_embeddings, 1)

    for i, text in enumerate(tienda_nombre):
        best_index = best_match_indices[i]
        porcentaje = similarity_scores[i]

        results.append({
            CODIGO_FABRICANTE_TIENDA: codigo_fabricante[i] if codigo_fabricante[i].strip().lower() != 'nan' else None,
            NOMBRE_TIENDA: text,
            CODIGO_FABRICANTE_CATALOGO: catalogo_codigo_fabricante[best_index],
            SKU_CATALOGO: catalogo_codigo_sku[best_index],
            NOMBRE_CATALOGO: catalogo_nombre_sku[best_index],
            MARCA_TIENDA: tienda_marca[i],
            MARCA_CATALOGO: catalogo_marca[best_index],
            UNIDAD_TIENDA: tienda_unidad_medida[i],
            UNIDAD_CATALOGO: catalogo_unidad_medida[best_index],
            PORCENTAJE_TOTAL: round(porcentaje * 100),
            RAZON: 'Embeddings'
        })

    return results


def porcentaje_variable_match_fuzzy(df_response, column, column_catalogo, column_tienda):
    """
    Calcula el porcentaje de match para cada variable (código de fabricante, marca, nombre, unidad de medida).
    Si la columna es de nombre quita la marca y la unidad del catálogo para comparar con la tienda.
    Input:
        df_response: DataFrame, resultados del match.
    Output:
        df_response: DataFrame, resultados del match con columnas de porcentaje de match para cada variable
    """
    if column != PORCENTAJE_NOMBRE:
        for i in range(len(df_response)):
            ratio = fuzz.ratio(clean_text(df_response[column_tienda][i]), clean_text(df_response[column_catalogo][i]))
            df_response.at[i, column] = round(float(ratio))
    else:
        marcas_set = set(df_response[MARCA_CATALOGO])
        unidades_set = set(df_response[UNIDAD_CATALOGO])
        for i in range(len(df_response)):
            name_split = df_response[column_catalogo][i].split(',')
            if name_split[0].strip() in marcas_set:
                name_split.pop(0)
            if name_split[-1].strip() in unidades_set:
                name_split.pop(-1)
            
            name_split = ','.join(name_split).strip()

            ratio = fuzz.ratio(clean_text(df_response[column_tienda][i]), clean_text(name_split))
            df_response.at[i, column] = round(float(ratio))

    return df_response


def porcentaje_variable_match_embeddings(df_response, column, column_catalogo, column_tienda, batch_size, target_tienda, path):
    tienda_embedding_path_var = f'{path}/{target_tienda}_{column_tienda}_embeddings.pkl'
    catalogo_embedding_path_var = f'{path}/{target_tienda}_{column_catalogo}_embeddings.pkl'

    empty_list = set()
    print(f"Obteniendo embeddings para {column_tienda}...")
    if os.path.exists(tienda_embedding_path_var):
        with open(tienda_embedding_path_var, 'rb') as f:
            column_tienda_embeddings = pickle.load(f)
    else:
        tienda_text = []
        for i in range(len(df_response)):
            if df_response[column_tienda][i]:
                tienda_text.append(str(clean_text(df_response[column_tienda][i])).strip())
            else:
                tienda_text.append('.')
                empty_list.add(i)
        column_tienda_embeddings = obtener_embeddings_fabricante(tienda_text, batch_size)
        with open(tienda_embedding_path_var, 'wb') as f:
            pickle.dump(column_tienda_embeddings, f)
    
    print(f"Obteniendo embeddings para {column_catalogo}...")
    if os.path.exists(catalogo_embedding_path_var):
        with open(catalogo_embedding_path_var, 'rb') as f:
            column_catalogo_embeddings = pickle.load(f)
    else:
        catalogo_text = []
        for i in range(len(df_response)):
            if df_response[column_catalogo][i]:
                catalogo_text.append(str(clean_text(df_response[column_catalogo][i])).strip())
            else:
                catalogo_text.append('.')
                empty_list.add(i)
        if column != PORCENTAJE_NOMBRE:
            column_catalogo_embeddings = obtener_embeddings_fabricante(catalogo_text, batch_size)
        else:
            marcas_set = set(df_response[MARCA_CATALOGO])
            unidades_set = set(df_response[UNIDAD_CATALOGO])
            column_catalogo_text = []
            for i in range(len(catalogo_text)):
                name_split = catalogo_text[i].split(',')
                if name_split[0].strip() in marcas_set:
                    name_split.pop(0)
                if name_split[-1].strip() in unidades_set:
                    name_split.pop(-1)

                name_split = ','.join(name_split).strip()
                column_catalogo_text.append(name_split)
            
            column_catalogo_embeddings = obtener_embeddings_fabricante(column_catalogo_text, batch_size)

        with open(catalogo_embedding_path_var, 'wb') as f:
            pickle.dump(column_catalogo_embeddings, f)

    for i in range(len(df_response)):
        if i in empty_list:
            df_response.at[i, column] = 0.0
            continue
        similarity = cosine_similarity(
            [column_tienda_embeddings[i]], 
            [column_catalogo_embeddings[i]]
        )[0, 0] * 100 

        df_response.at[i, column] = round(similarity)

    return df_response


def porcentaje_variable_match(method, df_response, column, column_catalogo, column_tienda, batch_size, target_tienda, path):
    df_response[column] = 0.0
    df_response[column] = df_response[column].astype(float)

    match method:
        case 'fuzzy':
            return porcentaje_variable_match_fuzzy(df_response, column, column_catalogo, column_tienda)
        case 'embeddings':
            return porcentaje_variable_match_embeddings(df_response, column, column_catalogo, column_tienda, batch_size, target_tienda, path)
        case _:
            raise ValueError("Invalid method.")


st.set_page_config(page_title="PIM", page_icon="archivos/construsync_logo.png", layout="wide")

if 'api_key' not in st.session_state:
    st.session_state['api_key'] = None

api_key_input = st.text_input("Introduce tu clave API de Azure OpenAI", type="password")
if api_key_input:
    st.session_state['api_key'] = api_key_input
    client = AzureOpenAI(
        api_key=st.session_state['api_key'],
        api_version='https://uscldgaioas01.openai.azure.com',
        azure_endpoint='2024-06-01'
    )
else:
    st.warning("Por favor, introduce tu clave API para continuar.")

def main():
    def comments():
        """ Idea
            Tener una search bar para hacer semantic search / vector search
            para asegurarnos que el producto no existe en el catálogo.
            - Que te de como 10 resultados.
            - Tiene opcion de marcar las opciones como duplicados (se escribe a un excel para revisar después).
            - Tiene opcion de añadir lo ingresado al catálogo (se escribe a un excel para después añadirlo al catálogo).
        """
        """ Columnas requeridas en catálogos
            - Pueden tener acentos y mayúsculas o minúsculas

            Columnas requeridas de catalogo tienda:
                NOMBRE - descripción del producto
                UNIDAD DE MEDIDA - unidad de medida del producto
                NUMERO DE FABRICANTE - código de fabricante del producto
                MARCA - marca del producto

            Columnas requeridas de catalogo completo:
                CODIGO_SKU - código de producto del catálogo
                CODIGO_FABRICANTE - código de fabricante del producto
                NOMBRE_SKU - descripción del producto
                UNIDAD DE VENTA - unidad de medida del producto
                MARCA - marca del producto
        """
        """ Tiempos de ejecución:
            Con streamlit:
                2-5 minutos totales

            Sin streamlit:
                embeddings de catalogo completo -> 1 hr / 1:30 hr

                asymegsa -> 2370 articulos -> 965 codigo de fabricante -> 57% match
                asymegsa con fuzzy -> 90 segs
                asymegsa con embeddings -> 320 segs

                3500 -> 3552 articulos -> 3552 codigo de fabricante -> 77% match
                3500 con fuzzy -> 94 segs
                3500 con embeddings -> 413 segs

                CMA_MATERIALES_GARCIA -> 3025 articulos -> 3025 codigo de fabricante -> 83% match
                CMA_MATERIALES_GARCIA con fuzzy -> 80 segs

                SUPLIMAT -> 2777 articulos -> 1893 codigo de fabricante -> 59% match
                SUPLIMAT con fuzzy -> 91 segs

                SUPLIMAT_sincambios -> 2777 articulos -> 1893 codigo de fabricante -> 60% match
                SUPLIMAT_sincambios con fuzzy -> 101 segs
        """
        pass
    
    if 'catalogo_embeddings' not in st.session_state:
        st.session_state['catalogo_embeddings'] = None

    catalogo_embeddings_path_input = st.text_input("Introduce la ruta del archivo con los embeddings del catálogo", type="text")
    if catalogo_embeddings_path_input:
        st.session_state['catalogo_embeddings'] = catalogo_embeddings_path_input
        with open(catalogo_embeddings_path_input, 'rb') as f:
            st.session_state['catalogo_embeddings'] = pickle.load(f)
    else:
        st.warning("Por favor, introduce la ruta del archivo con los embeddings del catálogo para continuar.")


    if st.session_state['api_key'] and st.session_state['catalogo_embeddings']:
        path = os.getcwd()
        path = path.replace('\\', '/')

        title1, title2 = st.columns([1,9])
        with title1:
            st.image("archivos/construsync_logo.png")
        with title2:
            st.title("PIM Construsync")

        st.header("Especificaciones")
        st.caption(
            "**Los nombres de las columnas pueden tener acentos y mayúsculas o minúsculas. "
            "Pueden haber más columnas en los archivos. "
            "Tiene que ser la primer pestaña del archivo.**"
        )
        col1, col2 = st.columns(2)
        col1.caption("""
            - **El archivo del catálogo debe contener las columnas:**
                - **CODIGO_FABRICANTE**
                - **NOMBRE_SKU**
                - **UNIDAD DE VENTA**
                - **MARCA**
                - **CODIGO_SKU**
        """)
        col2.caption("""
            - **El archivo de la tienda debe contener las columnas:**
                - **NUMERO DE FABRICANTE**
                - **NOMBRE**
                - **UNIDAD DE MEDIDA**
                - **MARCA**
        """)

        if 'done' not in st.session_state:
            st.session_state['done'] = False

        tienda_file = st.file_uploader("Selecciona el archivo de la tienda", type=['xlsx'])
        if tienda_file:
            target_tienda = tienda_file.name.split('.')[0]

        processcol1, processcol2 = st.columns([1, 9])
        rescol1, rescol2 = st.columns(2)

        with processcol1:
            clicked = st.button("Procesar", disabled=not tienda_file)

        if clicked:
            with st.status("Procesando...", expanded=True) as status:
                for key in list(st.session_state.keys()):
                    if key != 'done':
                        del st.session_state[key]
                st.session_state['done'] = False

                processcol2.empty()
                rescol1.empty()
                rescol2.empty()

                start = time.time()
                method, batch_size, embeddings_for_fabricante = 'fuzzy', 32, True
                tienda_embeddings_path = f"{path}/{target_tienda}_tienda_embeddings.pkl"
                embeddings_fabricante_path = f"{path}/{target_tienda}_fabricante_tienda_embeddings.pkl"

                st.write("Cargando catálogos...")
                df_catalogo = pd.read_excel(f'{path}/archivos/ARTICULOSCONPIM.xlsx').astype(str)
                df_tienda = pd.read_excel(tienda_file).astype(str)

                st.write("Limpiando catálogos...")
                df_tienda.columns = [unidecode(col.strip().upper()) for col in df_tienda.columns]
                df_catalogo.columns = [unidecode(col.strip().upper()) for col in df_catalogo.columns]    
                df_catalogo, df_tienda = cargar_y_limpiar_articulos(df_catalogo, df_tienda)

                st.write("Obteniendo datos del catálogo...")
                catalogo_embeddings = st.session_state['catalogo_embeddings']

                st.write("Haciendo match de los productos...")
                fabricantes_match, not_found = match_fabricante_producto(df_tienda, df_catalogo, batch_size, embeddings_for_fabricante, embeddings_fabricante_path, catalogo_embeddings)
                nombres_match = match_por_nombre(not_found, df_catalogo, batch_size, tienda_embeddings_path, catalogo_embeddings)
            
                fabricantes_match.extend(nombres_match)
                df_response = pd.DataFrame(fabricantes_match)

                st.write("Calculando similitud por variable...")
                df_response = porcentaje_variable_match(method, df_response, PORCENTAJE_CODIGO_FABRICANTE, CODIGO_FABRICANTE_CATALOGO, CODIGO_FABRICANTE_TIENDA, batch_size, target_tienda, path)
                df_response = porcentaje_variable_match(method, df_response, PORCENTAJE_NOMBRE, NOMBRE_CATALOGO, NOMBRE_TIENDA, batch_size, target_tienda, path)
                df_response = porcentaje_variable_match(method, df_response, PORCENTAJE_MARCA, MARCA_CATALOGO, MARCA_TIENDA, batch_size, target_tienda, path)
                df_response = porcentaje_variable_match(method, df_response, PORCENTAJE_UNIDAD, UNIDAD_CATALOGO, UNIDAD_TIENDA, batch_size, target_tienda, path)
                
                if 'output' not in st.session_state:
                    st.session_state['output'] = BytesIO()
                if 'response' not in st.session_state:
                    st.session_state['response'] = df_response
                if 'excel_name' not in st.session_state:
                    st.session_state['excel_name'] = f"{target_tienda}.xlsx"
                if 'num_products' not in st.session_state:
                    st.session_state['num_products'] = len(df_tienda['NOMBRE'])
                if 'time' not in st.session_state:
                    elapsed_time = round(time.time() - start)
                    if elapsed_time > 60:
                        minutes = elapsed_time // 60
                        seconds = elapsed_time % 60
                        minutos_text = "minutos" if minutes > 1 else "minuto"
                        if seconds == 0:
                            st.session_state['time'] = f"Tiempo de ejecución: {minutes} {minutos_text}"
                        else:
                            st.session_state['time'] = f"Tiempo de ejecución: {minutes} {minutos_text} y {seconds} segundos"
                    else:
                        st.session_state['time'] = f"Tiempo de ejecución: {elapsed_time} segundos"
                with pd.ExcelWriter(st.session_state['output'], engine="openpyxl") as writer:
                    st.session_state['response'].to_excel(writer, index=False)
                st.session_state['output'].seek(0)

                st.session_state['done'] = True

                status.update(
                    label="Proceso completado!", state="complete", expanded=False
                )

        if st.session_state['done']:
            with processcol2:
                st.download_button(
                    label="Descargar Excel",
                    data = st.session_state['output'],
                    file_name= f'resultados_{st.session_state['excel_name']}',
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

            with rescol1:
                st.success(f"{st.session_state['num_products']} productos procesados")
            with rescol2:
                st.info(st.session_state['time'])

if __name__ == '__main__':
    main()

# python -m streamlit run pim_app.py